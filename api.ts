/* tslint:disable */
/* eslint-disable */
/**
 * Analysis Specification for Meta-analysis
 * api to create a meta-analysis specification
 *
 * The version of the OpenAPI document: 1.0
 * Contact: jamesdkent21@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Annotation
 */
export interface Annotation {
    /**
     * 
     * @type {string}
     * @memberof Annotation
     */
    'neurostore_id'?: string;
    /**
     * 
     * @type {object}
     * @memberof Annotation
     */
    'annotation'?: object;
    /**
     * 
     * @type {string}
     * @memberof Annotation
     */
    'studyset'?: string;
}
/**
 * 
 * @export
 * @interface AnnotationList
 */
export interface AnnotationList {
    /**
     * 
     * @type {Array<AnnotationReturn>}
     * @memberof AnnotationList
     */
    'results'?: Array<AnnotationReturn>;
    /**
     * 
     * @type {object}
     * @memberof AnnotationList
     */
    'metadata'?: object;
}
/**
 * 
 * @export
 * @interface AnnotationReturn
 */
export interface AnnotationReturn {
    /**
     * 
     * @type {string}
     * @memberof AnnotationReturn
     */
    'neurostore_id'?: string;
    /**
     * 
     * @type {object}
     * @memberof AnnotationReturn
     */
    'annotation'?: object;
    /**
     * 
     * @type {string}
     * @memberof AnnotationReturn
     */
    'studyset'?: string;
    /**
     * 
     * @type {string}
     * @memberof AnnotationReturn
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AnnotationReturn
     */
    'updated_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AnnotationReturn
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof AnnotationReturn
     */
    'user'?: string | null;
}
/**
 * 
 * @export
 * @interface Corrector
 */
export interface Corrector {
    /**
     * 
     * @type {string}
     * @memberof Corrector
     */
    'type'?: string;
    /**
     * 
     * @type {object}
     * @memberof Corrector
     */
    'args'?: object;
}
/**
 * 
 * @export
 * @interface Estimator
 */
export interface Estimator {
    /**
     * 
     * @type {string}
     * @memberof Estimator
     */
    'type'?: string;
    /**
     * 
     * @type {object}
     * @memberof Estimator
     */
    'args'?: object;
}
/**
 * 
 * @export
 * @interface MetaAnalysis
 */
export interface MetaAnalysis {
    /**
     * 
     * @type {string | object}
     * @memberof MetaAnalysis
     */
    'specification'?: string | object;
    /**
     * 
     * @type {string | object}
     * @memberof MetaAnalysis
     */
    'studyset'?: string | object;
    /**
     * 
     * @type {string | object}
     * @memberof MetaAnalysis
     */
    'annotation'?: string | object;
    /**
     * 
     * @type {string}
     * @memberof MetaAnalysis
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MetaAnalysis
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface MetaAnalysisList
 */
export interface MetaAnalysisList {
    /**
     * 
     * @type {Array<MetaAnalysisReturn>}
     * @memberof MetaAnalysisList
     */
    'results'?: Array<MetaAnalysisReturn>;
    /**
     * 
     * @type {object}
     * @memberof MetaAnalysisList
     */
    'metadata'?: object;
}
/**
 * 
 * @export
 * @interface MetaAnalysisReturn
 */
export interface MetaAnalysisReturn {
    /**
     * 
     * @type {string | object}
     * @memberof MetaAnalysisReturn
     */
    'specification'?: string | object;
    /**
     * 
     * @type {string | object}
     * @memberof MetaAnalysisReturn
     */
    'studyset'?: string | object;
    /**
     * 
     * @type {string | object}
     * @memberof MetaAnalysisReturn
     */
    'annotation'?: string | object;
    /**
     * 
     * @type {string}
     * @memberof MetaAnalysisReturn
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof MetaAnalysisReturn
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof MetaAnalysisReturn
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof MetaAnalysisReturn
     */
    'updated_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MetaAnalysisReturn
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof MetaAnalysisReturn
     */
    'user'?: string | null;
}
/**
 * 
 * @export
 * @interface ReadOnly
 */
export interface ReadOnly {
    /**
     * 
     * @type {string}
     * @memberof ReadOnly
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ReadOnly
     */
    'updated_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReadOnly
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ReadOnly
     */
    'user'?: string | null;
}
/**
 * 
 * @export
 * @interface Specification
 */
export interface Specification {
    /**
     * 
     * @type {string}
     * @memberof Specification
     */
    'type'?: string;
    /**
     * 
     * @type {Estimator}
     * @memberof Specification
     */
    'estimator'?: Estimator | null;
    /**
     * 
     * @type {string}
     * @memberof Specification
     */
    'mask'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Specification
     */
    'contrast'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Specification
     */
    'transformer'?: string | null;
    /**
     * 
     * @type {Corrector}
     * @memberof Specification
     */
    'corrector'?: Corrector | null;
    /**
     * 
     * @type {string}
     * @memberof Specification
     */
    'filter'?: string | null;
}
/**
 * 
 * @export
 * @interface SpecificationList
 */
export interface SpecificationList {
    /**
     * 
     * @type {Array<SpecificationReturn>}
     * @memberof SpecificationList
     */
    'results'?: Array<SpecificationReturn>;
    /**
     * 
     * @type {object}
     * @memberof SpecificationList
     */
    'metadata'?: object;
}
/**
 * 
 * @export
 * @interface SpecificationReturn
 */
export interface SpecificationReturn {
    /**
     * 
     * @type {string}
     * @memberof SpecificationReturn
     */
    'type'?: string;
    /**
     * 
     * @type {Estimator}
     * @memberof SpecificationReturn
     */
    'estimator'?: Estimator | null;
    /**
     * 
     * @type {string}
     * @memberof SpecificationReturn
     */
    'mask'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SpecificationReturn
     */
    'contrast'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SpecificationReturn
     */
    'transformer'?: string | null;
    /**
     * 
     * @type {Corrector}
     * @memberof SpecificationReturn
     */
    'corrector'?: Corrector | null;
    /**
     * 
     * @type {string}
     * @memberof SpecificationReturn
     */
    'filter'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SpecificationReturn
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SpecificationReturn
     */
    'updated_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SpecificationReturn
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof SpecificationReturn
     */
    'user'?: string | null;
}
/**
 * 
 * @export
 * @interface Studyset
 */
export interface Studyset {
    /**
     * 
     * @type {string}
     * @memberof Studyset
     */
    'neurostore_id'?: string;
    /**
     * 
     * @type {object}
     * @memberof Studyset
     */
    'studyset'?: object;
}
/**
 * 
 * @export
 * @interface StudysetList
 */
export interface StudysetList {
    /**
     * 
     * @type {Array<StudysetReturn>}
     * @memberof StudysetList
     */
    'results'?: Array<StudysetReturn>;
    /**
     * 
     * @type {object}
     * @memberof StudysetList
     */
    'metadata'?: object;
}
/**
 * 
 * @export
 * @interface StudysetReturn
 */
export interface StudysetReturn {
    /**
     * 
     * @type {string}
     * @memberof StudysetReturn
     */
    'neurostore_id'?: string;
    /**
     * 
     * @type {object}
     * @memberof StudysetReturn
     */
    'studyset'?: object;
    /**
     * 
     * @type {string}
     * @memberof StudysetReturn
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudysetReturn
     */
    'updated_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StudysetReturn
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof StudysetReturn
     */
    'user'?: string | null;
}
/**
 * attributes of the user object
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'external_id'?: string;
}
/**
 * 
 * @export
 * @interface UserList
 */
export interface UserList {
    /**
     * 
     * @type {Array<UserReturn>}
     * @memberof UserList
     */
    'results'?: Array<UserReturn>;
    /**
     * 
     * @type {object}
     * @memberof UserList
     */
    'metadata'?: object;
}
/**
 * 
 * @export
 * @interface UserReturn
 */
export interface UserReturn {
    /**
     * 
     * @type {string}
     * @memberof UserReturn
     */
    'external_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserReturn
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserReturn
     */
    'updated_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserReturn
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserReturn
     */
    'user'?: string | null;
}

/**
 * AnnotationApi - axios parameter creator
 * @export
 */
export const AnnotationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * get a list of serialized annotations
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        annotationsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/annotations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get a single annotation
         * @summary Your GET endpoint
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        annotationsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('annotationsIdGet', 'id', id)
            const localVarPath = `/annotations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update an existing annotation
         * @summary Update Annotation
         * @param {string} id 
         * @param {Annotation} [annotation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        annotationsIdPut: async (id: string, annotation?: Annotation, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('annotationsIdPut', 'id', id)
            const localVarPath = `/annotations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JSON-Web-Token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(annotation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create a new serialized annotation
         * @summary Create Annotation
         * @param {Annotation} [annotation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        annotationsPost: async (annotation?: Annotation, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/annotations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JSON-Web-Token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(annotation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnnotationApi - functional programming interface
 * @export
 */
export const AnnotationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AnnotationApiAxiosParamCreator(configuration)
    return {
        /**
         * get a list of serialized annotations
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async annotationsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnnotationList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.annotationsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * get a single annotation
         * @summary Your GET endpoint
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async annotationsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnnotationReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.annotationsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * update an existing annotation
         * @summary Update Annotation
         * @param {string} id 
         * @param {Annotation} [annotation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async annotationsIdPut(id: string, annotation?: Annotation, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnnotationReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.annotationsIdPut(id, annotation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * create a new serialized annotation
         * @summary Create Annotation
         * @param {Annotation} [annotation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async annotationsPost(annotation?: Annotation, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnnotationReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.annotationsPost(annotation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AnnotationApi - factory interface
 * @export
 */
export const AnnotationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AnnotationApiFp(configuration)
    return {
        /**
         * get a list of serialized annotations
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        annotationsGet(options?: any): AxiosPromise<AnnotationList> {
            return localVarFp.annotationsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * get a single annotation
         * @summary Your GET endpoint
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        annotationsIdGet(id: string, options?: any): AxiosPromise<AnnotationReturn> {
            return localVarFp.annotationsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * update an existing annotation
         * @summary Update Annotation
         * @param {string} id 
         * @param {Annotation} [annotation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        annotationsIdPut(id: string, annotation?: Annotation, options?: any): AxiosPromise<AnnotationReturn> {
            return localVarFp.annotationsIdPut(id, annotation, options).then((request) => request(axios, basePath));
        },
        /**
         * create a new serialized annotation
         * @summary Create Annotation
         * @param {Annotation} [annotation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        annotationsPost(annotation?: Annotation, options?: any): AxiosPromise<AnnotationReturn> {
            return localVarFp.annotationsPost(annotation, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AnnotationApi - object-oriented interface
 * @export
 * @class AnnotationApi
 * @extends {BaseAPI}
 */
export class AnnotationApi extends BaseAPI {
    /**
     * get a list of serialized annotations
     * @summary Your GET endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationApi
     */
    public annotationsGet(options?: AxiosRequestConfig) {
        return AnnotationApiFp(this.configuration).annotationsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get a single annotation
     * @summary Your GET endpoint
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationApi
     */
    public annotationsIdGet(id: string, options?: AxiosRequestConfig) {
        return AnnotationApiFp(this.configuration).annotationsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update an existing annotation
     * @summary Update Annotation
     * @param {string} id 
     * @param {Annotation} [annotation] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationApi
     */
    public annotationsIdPut(id: string, annotation?: Annotation, options?: AxiosRequestConfig) {
        return AnnotationApiFp(this.configuration).annotationsIdPut(id, annotation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create a new serialized annotation
     * @summary Create Annotation
     * @param {Annotation} [annotation] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationApi
     */
    public annotationsPost(annotation?: Annotation, options?: AxiosRequestConfig) {
        return AnnotationApiFp(this.configuration).annotationsPost(annotation, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BundleApi - axios parameter creator
 * @export
 */
export const BundleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * list all runnable meta-analysis, studyset, annotation bundles
         * @summary Your GET endpoint
         * @param {string} [nested] show nested component instead of id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaAnalysesGet: async (nested?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/meta-analyses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nested !== undefined) {
                localVarQueryParameter['nested'] = nested;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get a bundle (specification, annotation, and studyset)
         * @summary Your GET endpoint
         * @param {string} id 
         * @param {string} [nested] show nested component instead of id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaAnalysesIdGet: async (id: string, nested?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('metaAnalysesIdGet', 'id', id)
            const localVarPath = `/meta-analyses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nested !== undefined) {
                localVarQueryParameter['nested'] = nested;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update an existing meta-analysis (that has not yet been run)
         * @summary Update Bundle
         * @param {string} id 
         * @param {MetaAnalysis} [metaAnalysis] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaAnalysesIdPut: async (id: string, metaAnalysis?: MetaAnalysis, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('metaAnalysesIdPut', 'id', id)
            const localVarPath = `/meta-analyses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JSON-Web-Token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(metaAnalysis, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create a new specification, studyset, annotation bundle
         * @summary Create Bundle
         * @param {MetaAnalysis} [metaAnalysis] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaAnalysesPost: async (metaAnalysis?: MetaAnalysis, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/meta-analyses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JSON-Web-Token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(metaAnalysis, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BundleApi - functional programming interface
 * @export
 */
export const BundleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BundleApiAxiosParamCreator(configuration)
    return {
        /**
         * list all runnable meta-analysis, studyset, annotation bundles
         * @summary Your GET endpoint
         * @param {string} [nested] show nested component instead of id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metaAnalysesGet(nested?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetaAnalysisList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metaAnalysesGet(nested, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * get a bundle (specification, annotation, and studyset)
         * @summary Your GET endpoint
         * @param {string} id 
         * @param {string} [nested] show nested component instead of id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metaAnalysesIdGet(id: string, nested?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetaAnalysisReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metaAnalysesIdGet(id, nested, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * update an existing meta-analysis (that has not yet been run)
         * @summary Update Bundle
         * @param {string} id 
         * @param {MetaAnalysis} [metaAnalysis] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metaAnalysesIdPut(id: string, metaAnalysis?: MetaAnalysis, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetaAnalysisReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metaAnalysesIdPut(id, metaAnalysis, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * create a new specification, studyset, annotation bundle
         * @summary Create Bundle
         * @param {MetaAnalysis} [metaAnalysis] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metaAnalysesPost(metaAnalysis?: MetaAnalysis, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetaAnalysisReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metaAnalysesPost(metaAnalysis, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BundleApi - factory interface
 * @export
 */
export const BundleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BundleApiFp(configuration)
    return {
        /**
         * list all runnable meta-analysis, studyset, annotation bundles
         * @summary Your GET endpoint
         * @param {string} [nested] show nested component instead of id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaAnalysesGet(nested?: string, options?: any): AxiosPromise<MetaAnalysisList> {
            return localVarFp.metaAnalysesGet(nested, options).then((request) => request(axios, basePath));
        },
        /**
         * get a bundle (specification, annotation, and studyset)
         * @summary Your GET endpoint
         * @param {string} id 
         * @param {string} [nested] show nested component instead of id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaAnalysesIdGet(id: string, nested?: string, options?: any): AxiosPromise<MetaAnalysisReturn> {
            return localVarFp.metaAnalysesIdGet(id, nested, options).then((request) => request(axios, basePath));
        },
        /**
         * update an existing meta-analysis (that has not yet been run)
         * @summary Update Bundle
         * @param {string} id 
         * @param {MetaAnalysis} [metaAnalysis] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaAnalysesIdPut(id: string, metaAnalysis?: MetaAnalysis, options?: any): AxiosPromise<MetaAnalysisReturn> {
            return localVarFp.metaAnalysesIdPut(id, metaAnalysis, options).then((request) => request(axios, basePath));
        },
        /**
         * create a new specification, studyset, annotation bundle
         * @summary Create Bundle
         * @param {MetaAnalysis} [metaAnalysis] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaAnalysesPost(metaAnalysis?: MetaAnalysis, options?: any): AxiosPromise<MetaAnalysisReturn> {
            return localVarFp.metaAnalysesPost(metaAnalysis, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BundleApi - object-oriented interface
 * @export
 * @class BundleApi
 * @extends {BaseAPI}
 */
export class BundleApi extends BaseAPI {
    /**
     * list all runnable meta-analysis, studyset, annotation bundles
     * @summary Your GET endpoint
     * @param {string} [nested] show nested component instead of id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BundleApi
     */
    public metaAnalysesGet(nested?: string, options?: AxiosRequestConfig) {
        return BundleApiFp(this.configuration).metaAnalysesGet(nested, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get a bundle (specification, annotation, and studyset)
     * @summary Your GET endpoint
     * @param {string} id 
     * @param {string} [nested] show nested component instead of id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BundleApi
     */
    public metaAnalysesIdGet(id: string, nested?: string, options?: AxiosRequestConfig) {
        return BundleApiFp(this.configuration).metaAnalysesIdGet(id, nested, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update an existing meta-analysis (that has not yet been run)
     * @summary Update Bundle
     * @param {string} id 
     * @param {MetaAnalysis} [metaAnalysis] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BundleApi
     */
    public metaAnalysesIdPut(id: string, metaAnalysis?: MetaAnalysis, options?: AxiosRequestConfig) {
        return BundleApiFp(this.configuration).metaAnalysesIdPut(id, metaAnalysis, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create a new specification, studyset, annotation bundle
     * @summary Create Bundle
     * @param {MetaAnalysis} [metaAnalysis] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BundleApi
     */
    public metaAnalysesPost(metaAnalysis?: MetaAnalysis, options?: AxiosRequestConfig) {
        return BundleApiFp(this.configuration).metaAnalysesPost(metaAnalysis, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MetaAnalysisApi - axios parameter creator
 * @export
 */
export const MetaAnalysisApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * list of meta-analysis specifications
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificationsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/specifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get a meta-analysis specification
         * @summary Your GET endpoint
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificationsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('specificationsIdGet', 'id', id)
            const localVarPath = `/specifications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update an existing meta analysis specification
         * @summary Update Meta-Analysis specification
         * @param {string} id 
         * @param {Specification} [specification] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificationsIdPut: async (id: string, specification?: Specification, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('specificationsIdPut', 'id', id)
            const localVarPath = `/specifications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JSON-Web-Token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(specification, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create a new meta-analysis specification
         * @param {Specification} [specification] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificationsPost: async (specification?: Specification, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/specifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JSON-Web-Token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(specification, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetaAnalysisApi - functional programming interface
 * @export
 */
export const MetaAnalysisApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MetaAnalysisApiAxiosParamCreator(configuration)
    return {
        /**
         * list of meta-analysis specifications
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async specificationsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpecificationList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.specificationsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * get a meta-analysis specification
         * @summary Your GET endpoint
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async specificationsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpecificationReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.specificationsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * update an existing meta analysis specification
         * @summary Update Meta-Analysis specification
         * @param {string} id 
         * @param {Specification} [specification] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async specificationsIdPut(id: string, specification?: Specification, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpecificationReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.specificationsIdPut(id, specification, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * create a new meta-analysis specification
         * @param {Specification} [specification] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async specificationsPost(specification?: Specification, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpecificationReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.specificationsPost(specification, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MetaAnalysisApi - factory interface
 * @export
 */
export const MetaAnalysisApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MetaAnalysisApiFp(configuration)
    return {
        /**
         * list of meta-analysis specifications
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificationsGet(options?: any): AxiosPromise<SpecificationList> {
            return localVarFp.specificationsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * get a meta-analysis specification
         * @summary Your GET endpoint
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificationsIdGet(id: string, options?: any): AxiosPromise<SpecificationReturn> {
            return localVarFp.specificationsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * update an existing meta analysis specification
         * @summary Update Meta-Analysis specification
         * @param {string} id 
         * @param {Specification} [specification] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificationsIdPut(id: string, specification?: Specification, options?: any): AxiosPromise<SpecificationReturn> {
            return localVarFp.specificationsIdPut(id, specification, options).then((request) => request(axios, basePath));
        },
        /**
         * create a new meta-analysis specification
         * @param {Specification} [specification] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificationsPost(specification?: Specification, options?: any): AxiosPromise<SpecificationReturn> {
            return localVarFp.specificationsPost(specification, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MetaAnalysisApi - object-oriented interface
 * @export
 * @class MetaAnalysisApi
 * @extends {BaseAPI}
 */
export class MetaAnalysisApi extends BaseAPI {
    /**
     * list of meta-analysis specifications
     * @summary Your GET endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaAnalysisApi
     */
    public specificationsGet(options?: AxiosRequestConfig) {
        return MetaAnalysisApiFp(this.configuration).specificationsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get a meta-analysis specification
     * @summary Your GET endpoint
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaAnalysisApi
     */
    public specificationsIdGet(id: string, options?: AxiosRequestConfig) {
        return MetaAnalysisApiFp(this.configuration).specificationsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update an existing meta analysis specification
     * @summary Update Meta-Analysis specification
     * @param {string} id 
     * @param {Specification} [specification] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaAnalysisApi
     */
    public specificationsIdPut(id: string, specification?: Specification, options?: AxiosRequestConfig) {
        return MetaAnalysisApiFp(this.configuration).specificationsIdPut(id, specification, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create a new meta-analysis specification
     * @param {Specification} [specification] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaAnalysisApi
     */
    public specificationsPost(specification?: Specification, options?: AxiosRequestConfig) {
        return MetaAnalysisApiFp(this.configuration).specificationsPost(specification, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StudysetApi - axios parameter creator
 * @export
 */
export const StudysetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * get a list of serialized studyset
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studysetsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/studysets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get a single serialized studyset
         * @summary Your GET endpoint
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studysetsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('studysetsIdGet', 'id', id)
            const localVarPath = `/studysets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update an existing serialized studyset
         * @summary Update Studyset
         * @param {string} id 
         * @param {Studyset} [studyset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studysetsIdPut: async (id: string, studyset?: Studyset, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('studysetsIdPut', 'id', id)
            const localVarPath = `/studysets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JSON-Web-Token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studyset, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create a new serialized studyset
         * @summary Create Studyset
         * @param {Studyset} [studyset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studysetsPost: async (studyset?: Studyset, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/studysets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JSON-Web-Token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studyset, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudysetApi - functional programming interface
 * @export
 */
export const StudysetApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StudysetApiAxiosParamCreator(configuration)
    return {
        /**
         * get a list of serialized studyset
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studysetsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudysetList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studysetsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * get a single serialized studyset
         * @summary Your GET endpoint
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studysetsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudysetReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studysetsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * update an existing serialized studyset
         * @summary Update Studyset
         * @param {string} id 
         * @param {Studyset} [studyset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studysetsIdPut(id: string, studyset?: Studyset, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudysetReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studysetsIdPut(id, studyset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * create a new serialized studyset
         * @summary Create Studyset
         * @param {Studyset} [studyset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studysetsPost(studyset?: Studyset, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudysetReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studysetsPost(studyset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StudysetApi - factory interface
 * @export
 */
export const StudysetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StudysetApiFp(configuration)
    return {
        /**
         * get a list of serialized studyset
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studysetsGet(options?: any): AxiosPromise<StudysetList> {
            return localVarFp.studysetsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * get a single serialized studyset
         * @summary Your GET endpoint
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studysetsIdGet(id: string, options?: any): AxiosPromise<StudysetReturn> {
            return localVarFp.studysetsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * update an existing serialized studyset
         * @summary Update Studyset
         * @param {string} id 
         * @param {Studyset} [studyset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studysetsIdPut(id: string, studyset?: Studyset, options?: any): AxiosPromise<StudysetReturn> {
            return localVarFp.studysetsIdPut(id, studyset, options).then((request) => request(axios, basePath));
        },
        /**
         * create a new serialized studyset
         * @summary Create Studyset
         * @param {Studyset} [studyset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studysetsPost(studyset?: Studyset, options?: any): AxiosPromise<StudysetReturn> {
            return localVarFp.studysetsPost(studyset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StudysetApi - object-oriented interface
 * @export
 * @class StudysetApi
 * @extends {BaseAPI}
 */
export class StudysetApi extends BaseAPI {
    /**
     * get a list of serialized studyset
     * @summary Your GET endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudysetApi
     */
    public studysetsGet(options?: AxiosRequestConfig) {
        return StudysetApiFp(this.configuration).studysetsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get a single serialized studyset
     * @summary Your GET endpoint
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudysetApi
     */
    public studysetsIdGet(id: string, options?: AxiosRequestConfig) {
        return StudysetApiFp(this.configuration).studysetsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update an existing serialized studyset
     * @summary Update Studyset
     * @param {string} id 
     * @param {Studyset} [studyset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudysetApi
     */
    public studysetsIdPut(id: string, studyset?: Studyset, options?: AxiosRequestConfig) {
        return StudysetApiFp(this.configuration).studysetsIdPut(id, studyset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create a new serialized studyset
     * @summary Create Studyset
     * @param {Studyset} [studyset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudysetApi
     */
    public studysetsPost(studyset?: Studyset, options?: AxiosRequestConfig) {
        return StudysetApiFp(this.configuration).studysetsPost(studyset, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the information of the user with the matching user ID.
         * @summary Get User Info by User ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdGet', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update information about a user
         * @summary Update User Information
         * @param {string} id 
         * @param {User} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdPut: async (id: string, user?: User, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdPut', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JSON-Web-Token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create a single user
         * @summary Create A New User
         * @param {User} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost: async (user?: User, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JSON-Web-Token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * List all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the information of the user with the matching user ID.
         * @summary Get User Info by User ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * update information about a user
         * @summary Update User Information
         * @param {string} id 
         * @param {User} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdPut(id: string, user?: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdPut(id, user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * create a single user
         * @summary Create A New User
         * @param {User} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPost(user?: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPost(user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * List all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(options?: any): AxiosPromise<UserList> {
            return localVarFp.usersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the information of the user with the matching user ID.
         * @summary Get User Info by User ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet(id: string, options?: any): AxiosPromise<UserReturn> {
            return localVarFp.usersIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * update information about a user
         * @summary Update User Information
         * @param {string} id 
         * @param {User} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdPut(id: string, user?: User, options?: any): AxiosPromise<UserReturn> {
            return localVarFp.usersIdPut(id, user, options).then((request) => request(axios, basePath));
        },
        /**
         * create a single user
         * @summary Create A New User
         * @param {User} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost(user?: User, options?: any): AxiosPromise<UserReturn> {
            return localVarFp.usersPost(user, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * List all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public usersGet(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).usersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the information of the user with the matching user ID.
     * @summary Get User Info by User ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public usersIdGet(id: string, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).usersIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update information about a user
     * @summary Update User Information
     * @param {string} id 
     * @param {User} [user] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public usersIdPut(id: string, user?: User, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).usersIdPut(id, user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create a single user
     * @summary Create A New User
     * @param {User} [user] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public usersPost(user?: User, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).usersPost(user, options).then((request) => request(this.axios, this.basePath));
    }
}


