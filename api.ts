/* tslint:disable */
/* eslint-disable */
/**
 * Analysis Specification for Meta-analysis
 * api to create a meta-analysis specification
 *
 * The version of the OpenAPI document: 1.0
 * Contact: jamesdkent21@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * a holder/reference to the annotation on neurostore
 * @export
 * @interface Annotation
 */
export interface Annotation {
    /**
     * the id of the annotation on neurostore
     * @type {string}
     * @memberof Annotation
     */
    'neurostore_id'?: string;
    /**
     * the snapshot taken of the annotation pending a successful run of the meta-analytic algorithm
     * @type {object}
     * @memberof Annotation
     */
    'snapshot'?: object | null;
    /**
     * The related studyset to this annotation.
     * @type {string}
     * @memberof Annotation
     */
    'studyset'?: string;
}
/**
 * 
 * @export
 * @interface AnnotationList
 */
export interface AnnotationList {
    /**
     * 
     * @type {Array<AnnotationReturn>}
     * @memberof AnnotationList
     */
    'results'?: Array<AnnotationReturn>;
    /**
     * 
     * @type {object}
     * @memberof AnnotationList
     */
    'metadata'?: object;
}
/**
 * 
 * @export
 * @interface AnnotationPostBody
 */
export interface AnnotationPostBody {
    /**
     * 
     * @type {string}
     * @memberof AnnotationPostBody
     */
    'internal_studyset_id': string;
    /**
     * the id of the annotation on neurostore
     * @type {string}
     * @memberof AnnotationPostBody
     */
    'neurostore_id'?: string;
    /**
     * the snapshot taken of the annotation pending a successful run of the meta-analytic algorithm
     * @type {object}
     * @memberof AnnotationPostBody
     */
    'snapshot'?: object | null;
    /**
     * The related studyset to this annotation.
     * @type {string}
     * @memberof AnnotationPostBody
     */
    'studyset'?: string;
}
/**
 * 
 * @export
 * @interface AnnotationReturn
 */
export interface AnnotationReturn {
    /**
     * the id of the annotation on neurostore
     * @type {string}
     * @memberof AnnotationReturn
     */
    'neurostore_id'?: string;
    /**
     * the snapshot taken of the annotation pending a successful run of the meta-analytic algorithm
     * @type {object}
     * @memberof AnnotationReturn
     */
    'snapshot'?: object | null;
    /**
     * The related studyset to this annotation.
     * @type {string}
     * @memberof AnnotationReturn
     */
    'studyset'?: string;
    /**
     * the identifier for the resource.
     * @type {string}
     * @memberof AnnotationReturn
     */
    'id'?: string;
    /**
     * when the resource was last modified.
     * @type {string}
     * @memberof AnnotationReturn
     */
    'updated_at'?: string | null;
    /**
     * When the resource was created.
     * @type {string}
     * @memberof AnnotationReturn
     */
    'created_at'?: string;
    /**
     * Who owns the resource.
     * @type {string}
     * @memberof AnnotationReturn
     */
    'user'?: string | null;
}
/**
 * 
 * @export
 * @interface AnnotationUpdate
 */
export interface AnnotationUpdate {
    /**
     * 
     * @type {string}
     * @memberof AnnotationUpdate
     */
    'internal_studyset_id'?: string;
    /**
     * the id of the annotation on neurostore
     * @type {string}
     * @memberof AnnotationUpdate
     */
    'neurostore_id'?: string;
    /**
     * the snapshot taken of the annotation pending a successful run of the meta-analytic algorithm
     * @type {object}
     * @memberof AnnotationUpdate
     */
    'snapshot'?: object | null;
    /**
     * The related studyset to this annotation.
     * @type {string}
     * @memberof AnnotationUpdate
     */
    'studyset'?: string;
}
/**
 * 
 * @export
 * @interface AnnotationUpdateAllOf
 */
export interface AnnotationUpdateAllOf {
    /**
     * 
     * @type {string}
     * @memberof AnnotationUpdateAllOf
     */
    'internal_studyset_id'?: string;
}
/**
 * The function/class applying statistical adjustments to the output of the meta-analysis (optional).
 * @export
 * @interface Corrector
 */
export interface Corrector {
    /**
     * the name of the function/class performing the correction. For example FWECorrector from NiMARE would be valid.
     * @type {string}
     * @memberof Corrector
     */
    'type'?: string;
    /**
     * key word arguments passed to the corrector to modidy default functionality, such as number of iterations, or the particular method of correction being applied.
     * @type {object}
     * @memberof Corrector
     */
    'args'?: object;
}
/**
 * the specification for the function/class running the meta-analysis
 * @export
 * @interface Estimator
 */
export interface Estimator {
    /**
     * the meta-analytic algorithm applied to the data. Currently this should be directly tied to the function/class running the meta-analysis. For example, ALE, or MKDADensity are valid NiMARE classes to put here.
     * @type {string}
     * @memberof Estimator
     */
    'type'?: string;
    /**
     * arbitrary keyword arguments to be passed into the function/class to modify default functionality, this could modify the kernel, resampling methods, or any other behavior defined in the function/class (like MKDADensity).
     * @type {object}
     * @memberof Estimator
     */
    'args'?: object;
}
/**
 * 
 * @export
 * @interface InlineResponse400
 */
export interface InlineResponse400 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse400
     */
    'detail'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse400
     */
    'status'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse400
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse400
     */
    'type'?: string;
}
/**
 * The combination of the specification determining what meta-analysis to run (required), the studyset to act as input to the meta-analytic algorithm (required), and the annotation to provide human readable annotations as well as acts as an optional filter on which analyses to select within the studyset (optional, but suggested).
 * @export
 * @interface MetaAnalysis
 */
export interface MetaAnalysis {
    /**
     * 
     * @type {string | Specification}
     * @memberof MetaAnalysis
     */
    'specification'?: string | Specification;
    /**
     * 
     * @type {string | Studyset}
     * @memberof MetaAnalysis
     */
    'studyset'?: string | Studyset;
    /**
     * 
     * @type {string | Annotation}
     * @memberof MetaAnalysis
     */
    'annotation'?: string | Annotation;
    /**
     * Human-readable name of the meta-analysis.
     * @type {string}
     * @memberof MetaAnalysis
     */
    'name'?: string | null;
    /**
     * Long form description of the meta-analysis.
     * @type {string}
     * @memberof MetaAnalysis
     */
    'description'?: string | null;
    /**
     * The id of the studyset on neurosynth-compose (as opposed to the id of the studyset on neurostore). Multiple snapshots of the studyset can be stored on neurosynth-compose so knowing which snapshot is being referenced is necessary.
     * @type {string}
     * @memberof MetaAnalysis
     */
    'internal_studyset_id'?: string;
    /**
     * The id of the annotation on neurosynth-compose (as opposed to the id of the annotation on neurostore). Multiple snapshots of the annotation can be stored on neurosynth-compose so knowing which snapshot is being referenced is necessary.
     * @type {string}
     * @memberof MetaAnalysis
     */
    'internal_annotation_id'?: string;
    /**
     * 
     * @type {object}
     * @memberof MetaAnalysis
     */
    'provenance'?: object | null;
}
/**
 * 
 * @export
 * @interface MetaAnalysisList
 */
export interface MetaAnalysisList {
    /**
     * 
     * @type {Array<MetaAnalysisReturn>}
     * @memberof MetaAnalysisList
     */
    'results'?: Array<MetaAnalysisReturn>;
    /**
     * 
     * @type {object}
     * @memberof MetaAnalysisList
     */
    'metadata'?: object;
}
/**
 * 
 * @export
 * @interface MetaAnalysisPostBody
 */
export interface MetaAnalysisPostBody {
    /**
     * 
     * @type {string | Specification}
     * @memberof MetaAnalysisPostBody
     */
    'specification': string | Specification;
    /**
     * 
     * @type {string | Studyset}
     * @memberof MetaAnalysisPostBody
     */
    'studyset'?: string | Studyset;
    /**
     * 
     * @type {string | Annotation}
     * @memberof MetaAnalysisPostBody
     */
    'annotation'?: string | Annotation;
    /**
     * Human-readable name of the meta-analysis.
     * @type {string}
     * @memberof MetaAnalysisPostBody
     */
    'name'?: string | null;
    /**
     * Long form description of the meta-analysis.
     * @type {string}
     * @memberof MetaAnalysisPostBody
     */
    'description'?: string | null;
    /**
     * The id of the studyset on neurosynth-compose (as opposed to the id of the studyset on neurostore). Multiple snapshots of the studyset can be stored on neurosynth-compose so knowing which snapshot is being referenced is necessary.
     * @type {string}
     * @memberof MetaAnalysisPostBody
     */
    'internal_studyset_id': string;
    /**
     * The id of the annotation on neurosynth-compose (as opposed to the id of the annotation on neurostore). Multiple snapshots of the annotation can be stored on neurosynth-compose so knowing which snapshot is being referenced is necessary.
     * @type {string}
     * @memberof MetaAnalysisPostBody
     */
    'internal_annotation_id': string;
    /**
     * 
     * @type {object}
     * @memberof MetaAnalysisPostBody
     */
    'provenance'?: object | null;
}
/**
 * 
 * @export
 * @interface MetaAnalysisReturn
 */
export interface MetaAnalysisReturn {
    /**
     * 
     * @type {string | Specification}
     * @memberof MetaAnalysisReturn
     */
    'specification'?: string | Specification;
    /**
     * 
     * @type {string | Studyset}
     * @memberof MetaAnalysisReturn
     */
    'studyset'?: string | Studyset;
    /**
     * 
     * @type {string | Annotation}
     * @memberof MetaAnalysisReturn
     */
    'annotation'?: string | Annotation;
    /**
     * Human-readable name of the meta-analysis.
     * @type {string}
     * @memberof MetaAnalysisReturn
     */
    'name'?: string | null;
    /**
     * Long form description of the meta-analysis.
     * @type {string}
     * @memberof MetaAnalysisReturn
     */
    'description'?: string | null;
    /**
     * The id of the studyset on neurosynth-compose (as opposed to the id of the studyset on neurostore). Multiple snapshots of the studyset can be stored on neurosynth-compose so knowing which snapshot is being referenced is necessary.
     * @type {string}
     * @memberof MetaAnalysisReturn
     */
    'internal_studyset_id'?: string;
    /**
     * The id of the annotation on neurosynth-compose (as opposed to the id of the annotation on neurostore). Multiple snapshots of the annotation can be stored on neurosynth-compose so knowing which snapshot is being referenced is necessary.
     * @type {string}
     * @memberof MetaAnalysisReturn
     */
    'internal_annotation_id'?: string;
    /**
     * 
     * @type {object}
     * @memberof MetaAnalysisReturn
     */
    'provenance'?: object | null;
    /**
     * the identifier for the resource.
     * @type {string}
     * @memberof MetaAnalysisReturn
     */
    'id'?: string;
    /**
     * when the resource was last modified.
     * @type {string}
     * @memberof MetaAnalysisReturn
     */
    'updated_at'?: string | null;
    /**
     * When the resource was created.
     * @type {string}
     * @memberof MetaAnalysisReturn
     */
    'created_at'?: string;
    /**
     * Who owns the resource.
     * @type {string}
     * @memberof MetaAnalysisReturn
     */
    'user'?: string | null;
}
/**
 * 
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * 
     * @type {object}
     * @memberof Project
     */
    'provenance'?: object;
    /**
     * 
     * @type {Array<MetaAnalysis | string>}
     * @memberof Project
     */
    'meta_analyses'?: Array<MetaAnalysis | string>;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface ProjectList
 */
export interface ProjectList {
    /**
     * 
     * @type {Array<ProjectReturn>}
     * @memberof ProjectList
     */
    'results'?: Array<ProjectReturn>;
    /**
     * 
     * @type {object}
     * @memberof ProjectList
     */
    'metadata'?: object;
}
/**
 * 
 * @export
 * @interface ProjectReturn
 */
export interface ProjectReturn {
    /**
     * the identifier for the resource.
     * @type {string}
     * @memberof ProjectReturn
     */
    'id'?: string;
    /**
     * when the resource was last modified.
     * @type {string}
     * @memberof ProjectReturn
     */
    'updated_at'?: string | null;
    /**
     * When the resource was created.
     * @type {string}
     * @memberof ProjectReturn
     */
    'created_at'?: string;
    /**
     * Who owns the resource.
     * @type {string}
     * @memberof ProjectReturn
     */
    'user'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof ProjectReturn
     */
    'provenance'?: object;
    /**
     * 
     * @type {Array<MetaAnalysis | string>}
     * @memberof ProjectReturn
     */
    'meta_analyses'?: Array<MetaAnalysis | string>;
    /**
     * 
     * @type {string}
     * @memberof ProjectReturn
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectReturn
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface ReadOnly
 */
export interface ReadOnly {
    /**
     * the identifier for the resource.
     * @type {string}
     * @memberof ReadOnly
     */
    'id'?: string;
    /**
     * when the resource was last modified.
     * @type {string}
     * @memberof ReadOnly
     */
    'updated_at'?: string | null;
    /**
     * When the resource was created.
     * @type {string}
     * @memberof ReadOnly
     */
    'created_at'?: string;
    /**
     * Who owns the resource.
     * @type {string}
     * @memberof ReadOnly
     */
    'user'?: string | null;
}
/**
 * a machine readable specification of how to run a meta-analysis (currently specifically tailored to NiMARE).
 * @export
 * @interface Specification
 */
export interface Specification {
    /**
     * the type of meta-analysis being run, typically either cbma or ibma, but others may become available in the future.
     * @type {string}
     * @memberof Specification
     */
    'type'?: string;
    /**
     * 
     * @type {Estimator}
     * @memberof Specification
     */
    'estimator'?: Estimator;
    /**
     * a string representing a binary nifti file to select which voxels a user wants to include in the analysis.
     * @type {string}
     * @memberof Specification
     */
    'mask'?: string | null;
    /**
     * underspecified selection of columns to contrast (TODO, make better).
     * @type {string}
     * @memberof Specification
     */
    'contrast'?: string | null;
    /**
     * A transformation applied to column(s) (e.g., binarize based on a threshold). This is likely to become deprecated.
     * @type {string}
     * @memberof Specification
     */
    'transformer'?: string | null;
    /**
     * 
     * @type {Corrector}
     * @memberof Specification
     */
    'corrector'?: Corrector | null;
    /**
     * a boolean column from annotations selecting which analyses to include in the meta-analysis
     * @type {string}
     * @memberof Specification
     */
    'filter'?: string | null;
}
/**
 * The representation of a list of specifications.
 * @export
 * @interface SpecificationList
 */
export interface SpecificationList {
    /**
     * 
     * @type {Array<SpecificationReturn>}
     * @memberof SpecificationList
     */
    'results'?: Array<SpecificationReturn>;
    /**
     * 
     * @type {object}
     * @memberof SpecificationList
     */
    'metadata'?: object;
}
/**
 * 
 * @export
 * @interface SpecificationPostBody
 */
export interface SpecificationPostBody {
    /**
     * the type of meta-analysis being run, typically either cbma or ibma, but others may become available in the future.
     * @type {string}
     * @memberof SpecificationPostBody
     */
    'type': string;
    /**
     * 
     * @type {Estimator}
     * @memberof SpecificationPostBody
     */
    'estimator': Estimator;
    /**
     * a string representing a binary nifti file to select which voxels a user wants to include in the analysis.
     * @type {string}
     * @memberof SpecificationPostBody
     */
    'mask'?: string | null;
    /**
     * underspecified selection of columns to contrast (TODO, make better).
     * @type {string}
     * @memberof SpecificationPostBody
     */
    'contrast'?: string | null;
    /**
     * A transformation applied to column(s) (e.g., binarize based on a threshold). This is likely to become deprecated.
     * @type {string}
     * @memberof SpecificationPostBody
     */
    'transformer'?: string | null;
    /**
     * 
     * @type {Corrector}
     * @memberof SpecificationPostBody
     */
    'corrector'?: Corrector | null;
    /**
     * a boolean column from annotations selecting which analyses to include in the meta-analysis
     * @type {string}
     * @memberof SpecificationPostBody
     */
    'filter'?: string | null;
}
/**
 * The view of the specification through an endpoint.
 * @export
 * @interface SpecificationReturn
 */
export interface SpecificationReturn {
    /**
     * the type of meta-analysis being run, typically either cbma or ibma, but others may become available in the future.
     * @type {string}
     * @memberof SpecificationReturn
     */
    'type'?: string;
    /**
     * 
     * @type {Estimator}
     * @memberof SpecificationReturn
     */
    'estimator'?: Estimator;
    /**
     * a string representing a binary nifti file to select which voxels a user wants to include in the analysis.
     * @type {string}
     * @memberof SpecificationReturn
     */
    'mask'?: string | null;
    /**
     * underspecified selection of columns to contrast (TODO, make better).
     * @type {string}
     * @memberof SpecificationReturn
     */
    'contrast'?: string | null;
    /**
     * A transformation applied to column(s) (e.g., binarize based on a threshold). This is likely to become deprecated.
     * @type {string}
     * @memberof SpecificationReturn
     */
    'transformer'?: string | null;
    /**
     * 
     * @type {Corrector}
     * @memberof SpecificationReturn
     */
    'corrector'?: Corrector | null;
    /**
     * a boolean column from annotations selecting which analyses to include in the meta-analysis
     * @type {string}
     * @memberof SpecificationReturn
     */
    'filter'?: string | null;
    /**
     * the identifier for the resource.
     * @type {string}
     * @memberof SpecificationReturn
     */
    'id'?: string;
    /**
     * when the resource was last modified.
     * @type {string}
     * @memberof SpecificationReturn
     */
    'updated_at'?: string | null;
    /**
     * When the resource was created.
     * @type {string}
     * @memberof SpecificationReturn
     */
    'created_at'?: string;
    /**
     * Who owns the resource.
     * @type {string}
     * @memberof SpecificationReturn
     */
    'user'?: string | null;
}
/**
 * 
 * @export
 * @interface Studyset
 */
export interface Studyset {
    /**
     * The id of the studyset on neurostore.
     * @type {string}
     * @memberof Studyset
     */
    'neurostore_id'?: string;
    /**
     * The snapshot of the studyset pending a successful run of the meta-analysis.
     * @type {object}
     * @memberof Studyset
     */
    'snapshot'?: object | null;
}
/**
 * 
 * @export
 * @interface StudysetList
 */
export interface StudysetList {
    /**
     * 
     * @type {Array<StudysetReturn>}
     * @memberof StudysetList
     */
    'results'?: Array<StudysetReturn>;
    /**
     * 
     * @type {object}
     * @memberof StudysetList
     */
    'metadata'?: object;
}
/**
 * 
 * @export
 * @interface StudysetPostBody
 */
export interface StudysetPostBody {
    /**
     * The id of the studyset on neurostore.
     * @type {string}
     * @memberof StudysetPostBody
     */
    'neurostore_id': string;
    /**
     * The snapshot of the studyset pending a successful run of the meta-analysis.
     * @type {object}
     * @memberof StudysetPostBody
     */
    'snapshot'?: object | null;
}
/**
 * 
 * @export
 * @interface StudysetReturn
 */
export interface StudysetReturn {
    /**
     * The id of the studyset on neurostore.
     * @type {string}
     * @memberof StudysetReturn
     */
    'neurostore_id'?: string;
    /**
     * The snapshot of the studyset pending a successful run of the meta-analysis.
     * @type {object}
     * @memberof StudysetReturn
     */
    'snapshot'?: object | null;
    /**
     * the identifier for the resource.
     * @type {string}
     * @memberof StudysetReturn
     */
    'id'?: string;
    /**
     * when the resource was last modified.
     * @type {string}
     * @memberof StudysetReturn
     */
    'updated_at'?: string | null;
    /**
     * When the resource was created.
     * @type {string}
     * @memberof StudysetReturn
     */
    'created_at'?: string;
    /**
     * Who owns the resource.
     * @type {string}
     * @memberof StudysetReturn
     */
    'user'?: string | null;
}
/**
 * attributes of the user object
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'external_id'?: string;
}
/**
 * 
 * @export
 * @interface UserList
 */
export interface UserList {
    /**
     * 
     * @type {Array<UserReturn>}
     * @memberof UserList
     */
    'results'?: Array<UserReturn>;
    /**
     * 
     * @type {object}
     * @memberof UserList
     */
    'metadata'?: object;
}
/**
 * 
 * @export
 * @interface UserReturn
 */
export interface UserReturn {
    /**
     * 
     * @type {string}
     * @memberof UserReturn
     */
    'external_id'?: string;
    /**
     * the identifier for the resource.
     * @type {string}
     * @memberof UserReturn
     */
    'id'?: string;
    /**
     * when the resource was last modified.
     * @type {string}
     * @memberof UserReturn
     */
    'updated_at'?: string | null;
    /**
     * When the resource was created.
     * @type {string}
     * @memberof UserReturn
     */
    'created_at'?: string;
    /**
     * Who owns the resource.
     * @type {string}
     * @memberof UserReturn
     */
    'user'?: string | null;
}

/**
 * AnnotationApi - axios parameter creator
 * @export
 */
export const AnnotationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * get a list of serialized/referenced annotations
         * @summary GET a list of annotations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        annotationsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/annotations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get a single annotation
         * @summary GET information about an annotation
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        annotationsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('annotationsIdGet', 'id', id)
            const localVarPath = `/annotations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update an existing annotation
         * @summary Update an Annotation
         * @param {string} id 
         * @param {AnnotationUpdate} [annotationUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        annotationsIdPut: async (id: string, annotationUpdate?: AnnotationUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('annotationsIdPut', 'id', id)
            const localVarPath = `/annotations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JSON-Web-Token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(annotationUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create a new serialized/referenced annotation
         * @summary Create a new Annotation
         * @param {AnnotationPostBody} [annotationPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        annotationsPost: async (annotationPostBody?: AnnotationPostBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/annotations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JSON-Web-Token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(annotationPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnnotationApi - functional programming interface
 * @export
 */
export const AnnotationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AnnotationApiAxiosParamCreator(configuration)
    return {
        /**
         * get a list of serialized/referenced annotations
         * @summary GET a list of annotations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async annotationsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnnotationList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.annotationsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * get a single annotation
         * @summary GET information about an annotation
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async annotationsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnnotationReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.annotationsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * update an existing annotation
         * @summary Update an Annotation
         * @param {string} id 
         * @param {AnnotationUpdate} [annotationUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async annotationsIdPut(id: string, annotationUpdate?: AnnotationUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnnotationReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.annotationsIdPut(id, annotationUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * create a new serialized/referenced annotation
         * @summary Create a new Annotation
         * @param {AnnotationPostBody} [annotationPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async annotationsPost(annotationPostBody?: AnnotationPostBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnnotationReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.annotationsPost(annotationPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AnnotationApi - factory interface
 * @export
 */
export const AnnotationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AnnotationApiFp(configuration)
    return {
        /**
         * get a list of serialized/referenced annotations
         * @summary GET a list of annotations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        annotationsGet(options?: any): AxiosPromise<AnnotationList> {
            return localVarFp.annotationsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * get a single annotation
         * @summary GET information about an annotation
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        annotationsIdGet(id: string, options?: any): AxiosPromise<AnnotationReturn> {
            return localVarFp.annotationsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * update an existing annotation
         * @summary Update an Annotation
         * @param {string} id 
         * @param {AnnotationUpdate} [annotationUpdate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        annotationsIdPut(id: string, annotationUpdate?: AnnotationUpdate, options?: any): AxiosPromise<AnnotationReturn> {
            return localVarFp.annotationsIdPut(id, annotationUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * create a new serialized/referenced annotation
         * @summary Create a new Annotation
         * @param {AnnotationPostBody} [annotationPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        annotationsPost(annotationPostBody?: AnnotationPostBody, options?: any): AxiosPromise<AnnotationReturn> {
            return localVarFp.annotationsPost(annotationPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AnnotationApi - object-oriented interface
 * @export
 * @class AnnotationApi
 * @extends {BaseAPI}
 */
export class AnnotationApi extends BaseAPI {
    /**
     * get a list of serialized/referenced annotations
     * @summary GET a list of annotations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationApi
     */
    public annotationsGet(options?: AxiosRequestConfig) {
        return AnnotationApiFp(this.configuration).annotationsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get a single annotation
     * @summary GET information about an annotation
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationApi
     */
    public annotationsIdGet(id: string, options?: AxiosRequestConfig) {
        return AnnotationApiFp(this.configuration).annotationsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update an existing annotation
     * @summary Update an Annotation
     * @param {string} id 
     * @param {AnnotationUpdate} [annotationUpdate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationApi
     */
    public annotationsIdPut(id: string, annotationUpdate?: AnnotationUpdate, options?: AxiosRequestConfig) {
        return AnnotationApiFp(this.configuration).annotationsIdPut(id, annotationUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create a new serialized/referenced annotation
     * @summary Create a new Annotation
     * @param {AnnotationPostBody} [annotationPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnnotationApi
     */
    public annotationsPost(annotationPostBody?: AnnotationPostBody, options?: AxiosRequestConfig) {
        return AnnotationApiFp(this.configuration).annotationsPost(annotationPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsIdGet', 'id', id)
            const localVarPath = `/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {Project} [project] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsIdPut: async (id: string, project?: Project, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectsIdPut', 'id', id)
            const localVarPath = `/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(project, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Project} [project] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsPost: async (project?: Project, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(project, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {Project} [project] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsIdPut(id: string, project?: Project, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsIdPut(id, project, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Project} [project] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsPost(project?: Project, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsPost(project, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGet(options?: any): AxiosPromise<ProjectList> {
            return localVarFp.projectsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsIdGet(id: string, options?: any): AxiosPromise<ProjectReturn> {
            return localVarFp.projectsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {Project} [project] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsIdPut(id: string, project?: Project, options?: any): AxiosPromise<ProjectReturn> {
            return localVarFp.projectsIdPut(id, project, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Project} [project] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsPost(project?: Project, options?: any): AxiosPromise<ProjectReturn> {
            return localVarFp.projectsPost(project, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Your GET endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public projectsGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).projectsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public projectsIdGet(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).projectsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {Project} [project] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public projectsIdPut(id: string, project?: Project, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).projectsIdPut(id, project, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Project} [project] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public projectsPost(project?: Project, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).projectsPost(project, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MetaAnalysisApi - axios parameter creator
 * @export
 */
export const MetaAnalysisApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * list all runnable specification, studyset, annotation bundles
         * @summary GET a list of meta-analyses
         * @param {boolean} [nested] show nested component instead of id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaAnalysesGet: async (nested?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/meta-analyses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nested !== undefined) {
                localVarQueryParameter['nested'] = nested;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get a meta-analysis (specification, annotation, and studyset)
         * @summary GET meta-analysis information
         * @param {string} id 
         * @param {boolean} [nested] show nested component instead of id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaAnalysesIdGet: async (id: string, nested?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('metaAnalysesIdGet', 'id', id)
            const localVarPath = `/meta-analyses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nested !== undefined) {
                localVarQueryParameter['nested'] = nested;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update an existing meta-analysis (that has not yet been run)
         * @summary Update a meta-analysis
         * @param {string} id 
         * @param {MetaAnalysis} [metaAnalysis] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaAnalysesIdPut: async (id: string, metaAnalysis?: MetaAnalysis, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('metaAnalysesIdPut', 'id', id)
            const localVarPath = `/meta-analyses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JSON-Web-Token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(metaAnalysis, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create a new specification, studyset, annotation bundle
         * @summary Create a new meta-analysis
         * @param {MetaAnalysisPostBody} [metaAnalysisPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaAnalysesPost: async (metaAnalysisPostBody?: MetaAnalysisPostBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/meta-analyses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JSON-Web-Token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(metaAnalysisPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetaAnalysisApi - functional programming interface
 * @export
 */
export const MetaAnalysisApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MetaAnalysisApiAxiosParamCreator(configuration)
    return {
        /**
         * list all runnable specification, studyset, annotation bundles
         * @summary GET a list of meta-analyses
         * @param {boolean} [nested] show nested component instead of id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metaAnalysesGet(nested?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetaAnalysisList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metaAnalysesGet(nested, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * get a meta-analysis (specification, annotation, and studyset)
         * @summary GET meta-analysis information
         * @param {string} id 
         * @param {boolean} [nested] show nested component instead of id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metaAnalysesIdGet(id: string, nested?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetaAnalysisReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metaAnalysesIdGet(id, nested, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * update an existing meta-analysis (that has not yet been run)
         * @summary Update a meta-analysis
         * @param {string} id 
         * @param {MetaAnalysis} [metaAnalysis] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metaAnalysesIdPut(id: string, metaAnalysis?: MetaAnalysis, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetaAnalysisReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metaAnalysesIdPut(id, metaAnalysis, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * create a new specification, studyset, annotation bundle
         * @summary Create a new meta-analysis
         * @param {MetaAnalysisPostBody} [metaAnalysisPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metaAnalysesPost(metaAnalysisPostBody?: MetaAnalysisPostBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetaAnalysisReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metaAnalysesPost(metaAnalysisPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MetaAnalysisApi - factory interface
 * @export
 */
export const MetaAnalysisApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MetaAnalysisApiFp(configuration)
    return {
        /**
         * list all runnable specification, studyset, annotation bundles
         * @summary GET a list of meta-analyses
         * @param {boolean} [nested] show nested component instead of id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaAnalysesGet(nested?: boolean, options?: any): AxiosPromise<MetaAnalysisList> {
            return localVarFp.metaAnalysesGet(nested, options).then((request) => request(axios, basePath));
        },
        /**
         * get a meta-analysis (specification, annotation, and studyset)
         * @summary GET meta-analysis information
         * @param {string} id 
         * @param {boolean} [nested] show nested component instead of id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaAnalysesIdGet(id: string, nested?: boolean, options?: any): AxiosPromise<MetaAnalysisReturn> {
            return localVarFp.metaAnalysesIdGet(id, nested, options).then((request) => request(axios, basePath));
        },
        /**
         * update an existing meta-analysis (that has not yet been run)
         * @summary Update a meta-analysis
         * @param {string} id 
         * @param {MetaAnalysis} [metaAnalysis] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaAnalysesIdPut(id: string, metaAnalysis?: MetaAnalysis, options?: any): AxiosPromise<MetaAnalysisReturn> {
            return localVarFp.metaAnalysesIdPut(id, metaAnalysis, options).then((request) => request(axios, basePath));
        },
        /**
         * create a new specification, studyset, annotation bundle
         * @summary Create a new meta-analysis
         * @param {MetaAnalysisPostBody} [metaAnalysisPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaAnalysesPost(metaAnalysisPostBody?: MetaAnalysisPostBody, options?: any): AxiosPromise<MetaAnalysisReturn> {
            return localVarFp.metaAnalysesPost(metaAnalysisPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MetaAnalysisApi - object-oriented interface
 * @export
 * @class MetaAnalysisApi
 * @extends {BaseAPI}
 */
export class MetaAnalysisApi extends BaseAPI {
    /**
     * list all runnable specification, studyset, annotation bundles
     * @summary GET a list of meta-analyses
     * @param {boolean} [nested] show nested component instead of id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaAnalysisApi
     */
    public metaAnalysesGet(nested?: boolean, options?: AxiosRequestConfig) {
        return MetaAnalysisApiFp(this.configuration).metaAnalysesGet(nested, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get a meta-analysis (specification, annotation, and studyset)
     * @summary GET meta-analysis information
     * @param {string} id 
     * @param {boolean} [nested] show nested component instead of id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaAnalysisApi
     */
    public metaAnalysesIdGet(id: string, nested?: boolean, options?: AxiosRequestConfig) {
        return MetaAnalysisApiFp(this.configuration).metaAnalysesIdGet(id, nested, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update an existing meta-analysis (that has not yet been run)
     * @summary Update a meta-analysis
     * @param {string} id 
     * @param {MetaAnalysis} [metaAnalysis] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaAnalysisApi
     */
    public metaAnalysesIdPut(id: string, metaAnalysis?: MetaAnalysis, options?: AxiosRequestConfig) {
        return MetaAnalysisApiFp(this.configuration).metaAnalysesIdPut(id, metaAnalysis, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create a new specification, studyset, annotation bundle
     * @summary Create a new meta-analysis
     * @param {MetaAnalysisPostBody} [metaAnalysisPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaAnalysisApi
     */
    public metaAnalysesPost(metaAnalysisPostBody?: MetaAnalysisPostBody, options?: AxiosRequestConfig) {
        return MetaAnalysisApiFp(this.configuration).metaAnalysesPost(metaAnalysisPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SpecificationApi - axios parameter creator
 * @export
 */
export const SpecificationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * list of meta-analysis specifications
         * @summary Get a list of Specifications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificationsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/specifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get a meta-analysis specification
         * @summary Get information about a Specification
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificationsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('specificationsIdGet', 'id', id)
            const localVarPath = `/specifications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update an existing meta analysis specification
         * @summary Update Meta-Analysis specification
         * @param {string} id 
         * @param {Specification} [specification] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificationsIdPut: async (id: string, specification?: Specification, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('specificationsIdPut', 'id', id)
            const localVarPath = `/specifications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JSON-Web-Token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(specification, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create a new meta-analysis specification
         * @summary Create a Specification
         * @param {SpecificationPostBody} [specificationPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificationsPost: async (specificationPostBody?: SpecificationPostBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/specifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JSON-Web-Token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(specificationPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SpecificationApi - functional programming interface
 * @export
 */
export const SpecificationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SpecificationApiAxiosParamCreator(configuration)
    return {
        /**
         * list of meta-analysis specifications
         * @summary Get a list of Specifications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async specificationsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpecificationList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.specificationsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * get a meta-analysis specification
         * @summary Get information about a Specification
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async specificationsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpecificationReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.specificationsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * update an existing meta analysis specification
         * @summary Update Meta-Analysis specification
         * @param {string} id 
         * @param {Specification} [specification] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async specificationsIdPut(id: string, specification?: Specification, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpecificationReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.specificationsIdPut(id, specification, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * create a new meta-analysis specification
         * @summary Create a Specification
         * @param {SpecificationPostBody} [specificationPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async specificationsPost(specificationPostBody?: SpecificationPostBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpecificationReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.specificationsPost(specificationPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SpecificationApi - factory interface
 * @export
 */
export const SpecificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SpecificationApiFp(configuration)
    return {
        /**
         * list of meta-analysis specifications
         * @summary Get a list of Specifications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificationsGet(options?: any): AxiosPromise<SpecificationList> {
            return localVarFp.specificationsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * get a meta-analysis specification
         * @summary Get information about a Specification
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificationsIdGet(id: string, options?: any): AxiosPromise<SpecificationReturn> {
            return localVarFp.specificationsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * update an existing meta analysis specification
         * @summary Update Meta-Analysis specification
         * @param {string} id 
         * @param {Specification} [specification] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificationsIdPut(id: string, specification?: Specification, options?: any): AxiosPromise<SpecificationReturn> {
            return localVarFp.specificationsIdPut(id, specification, options).then((request) => request(axios, basePath));
        },
        /**
         * create a new meta-analysis specification
         * @summary Create a Specification
         * @param {SpecificationPostBody} [specificationPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificationsPost(specificationPostBody?: SpecificationPostBody, options?: any): AxiosPromise<SpecificationReturn> {
            return localVarFp.specificationsPost(specificationPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SpecificationApi - object-oriented interface
 * @export
 * @class SpecificationApi
 * @extends {BaseAPI}
 */
export class SpecificationApi extends BaseAPI {
    /**
     * list of meta-analysis specifications
     * @summary Get a list of Specifications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecificationApi
     */
    public specificationsGet(options?: AxiosRequestConfig) {
        return SpecificationApiFp(this.configuration).specificationsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get a meta-analysis specification
     * @summary Get information about a Specification
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecificationApi
     */
    public specificationsIdGet(id: string, options?: AxiosRequestConfig) {
        return SpecificationApiFp(this.configuration).specificationsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update an existing meta analysis specification
     * @summary Update Meta-Analysis specification
     * @param {string} id 
     * @param {Specification} [specification] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecificationApi
     */
    public specificationsIdPut(id: string, specification?: Specification, options?: AxiosRequestConfig) {
        return SpecificationApiFp(this.configuration).specificationsIdPut(id, specification, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create a new meta-analysis specification
     * @summary Create a Specification
     * @param {SpecificationPostBody} [specificationPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpecificationApi
     */
    public specificationsPost(specificationPostBody?: SpecificationPostBody, options?: AxiosRequestConfig) {
        return SpecificationApiFp(this.configuration).specificationsPost(specificationPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StudysetApi - axios parameter creator
 * @export
 */
export const StudysetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * get a list of serialized/referenced studysets
         * @summary Get a list of Studysets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studysetsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/studysets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get a single serialized/referenced studyset
         * @summary Get information about a Studyset
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studysetsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('studysetsIdGet', 'id', id)
            const localVarPath = `/studysets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update an existing serialized/referenced studyset
         * @summary Update a Studyset
         * @param {string} id 
         * @param {Studyset} [studyset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studysetsIdPut: async (id: string, studyset?: Studyset, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('studysetsIdPut', 'id', id)
            const localVarPath = `/studysets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JSON-Web-Token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studyset, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create a new serialized/referenced studyset
         * @summary Create a new Studyset
         * @param {StudysetPostBody} [studysetPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studysetsPost: async (studysetPostBody?: StudysetPostBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/studysets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JSON-Web-Token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(studysetPostBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudysetApi - functional programming interface
 * @export
 */
export const StudysetApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StudysetApiAxiosParamCreator(configuration)
    return {
        /**
         * get a list of serialized/referenced studysets
         * @summary Get a list of Studysets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studysetsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudysetList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studysetsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * get a single serialized/referenced studyset
         * @summary Get information about a Studyset
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studysetsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudysetReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studysetsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * update an existing serialized/referenced studyset
         * @summary Update a Studyset
         * @param {string} id 
         * @param {Studyset} [studyset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studysetsIdPut(id: string, studyset?: Studyset, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudysetReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studysetsIdPut(id, studyset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * create a new serialized/referenced studyset
         * @summary Create a new Studyset
         * @param {StudysetPostBody} [studysetPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async studysetsPost(studysetPostBody?: StudysetPostBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudysetReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.studysetsPost(studysetPostBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StudysetApi - factory interface
 * @export
 */
export const StudysetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StudysetApiFp(configuration)
    return {
        /**
         * get a list of serialized/referenced studysets
         * @summary Get a list of Studysets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studysetsGet(options?: any): AxiosPromise<StudysetList> {
            return localVarFp.studysetsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * get a single serialized/referenced studyset
         * @summary Get information about a Studyset
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studysetsIdGet(id: string, options?: any): AxiosPromise<StudysetReturn> {
            return localVarFp.studysetsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * update an existing serialized/referenced studyset
         * @summary Update a Studyset
         * @param {string} id 
         * @param {Studyset} [studyset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studysetsIdPut(id: string, studyset?: Studyset, options?: any): AxiosPromise<StudysetReturn> {
            return localVarFp.studysetsIdPut(id, studyset, options).then((request) => request(axios, basePath));
        },
        /**
         * create a new serialized/referenced studyset
         * @summary Create a new Studyset
         * @param {StudysetPostBody} [studysetPostBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        studysetsPost(studysetPostBody?: StudysetPostBody, options?: any): AxiosPromise<StudysetReturn> {
            return localVarFp.studysetsPost(studysetPostBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StudysetApi - object-oriented interface
 * @export
 * @class StudysetApi
 * @extends {BaseAPI}
 */
export class StudysetApi extends BaseAPI {
    /**
     * get a list of serialized/referenced studysets
     * @summary Get a list of Studysets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudysetApi
     */
    public studysetsGet(options?: AxiosRequestConfig) {
        return StudysetApiFp(this.configuration).studysetsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get a single serialized/referenced studyset
     * @summary Get information about a Studyset
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudysetApi
     */
    public studysetsIdGet(id: string, options?: AxiosRequestConfig) {
        return StudysetApiFp(this.configuration).studysetsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update an existing serialized/referenced studyset
     * @summary Update a Studyset
     * @param {string} id 
     * @param {Studyset} [studyset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudysetApi
     */
    public studysetsIdPut(id: string, studyset?: Studyset, options?: AxiosRequestConfig) {
        return StudysetApiFp(this.configuration).studysetsIdPut(id, studyset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create a new serialized/referenced studyset
     * @summary Create a new Studyset
     * @param {StudysetPostBody} [studysetPostBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudysetApi
     */
    public studysetsPost(studysetPostBody?: StudysetPostBody, options?: AxiosRequestConfig) {
        return StudysetApiFp(this.configuration).studysetsPost(studysetPostBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List all users
         * @summary GET list of Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the information of the user with the matching user ID.
         * @summary Get User Info by User ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdGet', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update information about a user
         * @summary Update User Information
         * @param {string} id 
         * @param {User} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdPut: async (id: string, user?: User, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdPut', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JSON-Web-Token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * create a single user
         * @summary Create A New User
         * @param {User} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost: async (user?: User, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JSON-Web-Token required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * List all users
         * @summary GET list of Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the information of the user with the matching user ID.
         * @summary Get User Info by User ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * update information about a user
         * @summary Update User Information
         * @param {string} id 
         * @param {User} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdPut(id: string, user?: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdPut(id, user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * create a single user
         * @summary Create A New User
         * @param {User} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPost(user?: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPost(user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * List all users
         * @summary GET list of Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(options?: any): AxiosPromise<UserList> {
            return localVarFp.usersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the information of the user with the matching user ID.
         * @summary Get User Info by User ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet(id: string, options?: any): AxiosPromise<UserReturn> {
            return localVarFp.usersIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * update information about a user
         * @summary Update User Information
         * @param {string} id 
         * @param {User} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdPut(id: string, user?: User, options?: any): AxiosPromise<UserReturn> {
            return localVarFp.usersIdPut(id, user, options).then((request) => request(axios, basePath));
        },
        /**
         * create a single user
         * @summary Create A New User
         * @param {User} [user] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost(user?: User, options?: any): AxiosPromise<UserReturn> {
            return localVarFp.usersPost(user, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * List all users
     * @summary GET list of Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public usersGet(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).usersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the information of the user with the matching user ID.
     * @summary Get User Info by User ID
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public usersIdGet(id: string, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).usersIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update information about a user
     * @summary Update User Information
     * @param {string} id 
     * @param {User} [user] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public usersIdPut(id: string, user?: User, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).usersIdPut(id, user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * create a single user
     * @summary Create A New User
     * @param {User} [user] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public usersPost(user?: User, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).usersPost(user, options).then((request) => request(this.axios, this.basePath));
    }
}


